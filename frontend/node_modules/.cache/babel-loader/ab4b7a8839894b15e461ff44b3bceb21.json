{"ast":null,"code":"import { LOGIN_URL, AUTHORIZE_URL, LOGOUT_URL, CHECK_AUTH_URL } from \"app/static/url\";\nimport axios from \"app/hooks/useAxios\";\n/*\n * login is called from Home\n * gets query from /api/auth/login with spotify login url, redirect uri, state, etc\n * on success, home forwards itself to the query url\n * TODO: fix 'any'\n *\n */\n\nexport const login = async () => {\n  return axios.get(LOGIN_URL);\n};\n/*\n * authorize is called from Redirect\n * passes code and state to be added as query params\n * back-end verifies states\n * TODO: fix 'any' return\n * TODO: fix undefined type ??\n *\n */\n\nexport const authorize = async (code, state) => {\n  return axios.get(AUTHORIZE_URL, {\n    params: {\n      code: code,\n      state: state\n    }\n  });\n};\n/**\n * Makes an API call to see if the current JWT stored is \n * valid or not\n * @param jwt jwt from the local storage\n */\n\nexport const checkLogin = async () => {\n  const jwt = localStorage.getItem('v-token');\n  return axios.post(CHECK_AUTH_URL, {\n    jwt\n  });\n};\n/**\n * Service to log the user out\n * Sends the JWT\n */\n\nexport const logout = async () => {\n  const jwt = localStorage.getItem('v-token');\n  return axios.post(LOGOUT_URL, {\n    jwt\n  });\n};","map":{"version":3,"sources":["/Users/samuelmunro/development/vibey/frontend/src/app/services/auth.service.ts"],"names":["LOGIN_URL","AUTHORIZE_URL","LOGOUT_URL","CHECK_AUTH_URL","axios","login","get","authorize","code","state","params","checkLogin","jwt","localStorage","getItem","post","logout"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,aAApB,EAAmCC,UAAnC,EAA+CC,cAA/C,QAAqE,gBAArE;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,KAAK,GAAG,YAA0B;AAC7C,SAAOD,KAAK,CAACE,GAAN,CAAUN,SAAV,CAAP;AACD,CAFM;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMO,SAAS,GAAG,OACvBC,IADuB,EAEvBC,KAFuB,KAGN;AACjB,SAAOL,KAAK,CAACE,GAAN,CAAUL,aAAV,EAAyB;AAC9BS,IAAAA,MAAM,EAAE;AACNF,MAAAA,IAAI,EAAEA,IADA;AAENC,MAAAA,KAAK,EAAEA;AAFD;AADsB,GAAzB,CAAP;AAMD,CAVM;AAYP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAME,UAAU,GAAG,YAAyB;AACjD,QAAMC,GAAG,GAAGC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAZ;AACA,SAAOV,KAAK,CAACW,IAAN,CAAWZ,cAAX,EAA2B;AAACS,IAAAA;AAAD,GAA3B,CAAP;AACD,CAHM;AAKP;AACA;AACA;AACA;;AACA,OAAO,MAAMI,MAAM,GAAG,YAAyB;AAC7C,QAAMJ,GAAG,GAAGC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAZ;AACA,SAAOV,KAAK,CAACW,IAAN,CAAWb,UAAX,EAAuB;AAACU,IAAAA;AAAD,GAAvB,CAAP;AACD,CAHM","sourcesContent":["import { LOGIN_URL, AUTHORIZE_URL, LOGOUT_URL, CHECK_AUTH_URL } from \"app/static/url\";\nimport axios from \"app/hooks/useAxios\";\n\n/*\n * login is called from Home\n * gets query from /api/auth/login with spotify login url, redirect uri, state, etc\n * on success, home forwards itself to the query url\n * TODO: fix 'any'\n *\n */\nexport const login = async (): Promise<any> => {\n  return axios.get(LOGIN_URL);\n};\n\n/*\n * authorize is called from Redirect\n * passes code and state to be added as query params\n * back-end verifies states\n * TODO: fix 'any' return\n * TODO: fix undefined type ??\n *\n */\nexport const authorize = async (\n  code: string | undefined,\n  state: string | undefined\n): Promise<any> => {\n  return axios.get(AUTHORIZE_URL, {\n    params: {\n      code: code,\n      state: state,\n    },\n  });\n};\n\n/**\n * Makes an API call to see if the current JWT stored is \n * valid or not\n * @param jwt jwt from the local storage\n */\nexport const checkLogin = async(): Promise<any> => {\n  const jwt = localStorage.getItem('v-token')\n  return axios.post(CHECK_AUTH_URL, {jwt});\n}\n\n/**\n * Service to log the user out\n * Sends the JWT\n */\nexport const logout = async(): Promise<any> => {\n  const jwt = localStorage.getItem('v-token');\n  return axios.post(LOGOUT_URL, {jwt})\n}"]},"metadata":{},"sourceType":"module"}