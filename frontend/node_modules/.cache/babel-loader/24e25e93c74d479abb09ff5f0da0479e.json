{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useControllableState, useFocusOnPointerDown, useUpdateEffect } from \"@chakra-ui/hooks\";\nimport { ariaAttr, callAllHandlers, contains, focus, getOwnerDocument, isBrowser, isEmpty, normalizeEventKey, getRelatedTarget } from \"@chakra-ui/utils\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport { useCallback, useRef, useState } from \"react\";\n/**\n * React hook for managing the inline renaming of some text.\n *\n * @see Docs https://chakra-ui.com/docs/editable\n */\n\nexport function useEditable(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    onChange: onChangeProp,\n    onCancel: onCancelProp,\n    onSubmit: onSubmitProp,\n    value: valueProp,\n    isDisabled,\n    defaultValue,\n    startWithEditView,\n    isPreviewFocusable = true,\n    submitOnBlur = true,\n    selectAllOnFocus = true,\n    placeholder,\n    onEdit: onEditProp\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"onChange\", \"onCancel\", \"onSubmit\", \"value\", \"isDisabled\", \"defaultValue\", \"startWithEditView\", \"isPreviewFocusable\", \"submitOnBlur\", \"selectAllOnFocus\", \"placeholder\", \"onEdit\"]);\n\n  var defaultIsEditing = Boolean(startWithEditView && !isDisabled);\n  var [isEditing, setIsEditing] = useState(defaultIsEditing);\n  var [value, setValue] = useControllableState({\n    defaultValue: defaultValue || \"\",\n    value: valueProp,\n    onChange: onChangeProp\n  });\n  /**\n   * Keep track of the previous value, so if users\n   * presses `cancel`, we can revert to it.\n   */\n\n  var [prevValue, setPrevValue] = useState(value);\n  /**\n   * Ref to help focus the input in edit mode\n   */\n\n  var inputRef = useRef(null);\n  var previewRef = useRef(null);\n  var editButtonRef = useRef(null);\n  var cancelButtonRef = useRef(null);\n  var submitButtonRef = useRef(null);\n  useFocusOnPointerDown({\n    doc: isBrowser ? getOwnerDocument(inputRef.current) : null,\n    elements: [cancelButtonRef, submitButtonRef]\n  });\n  var isInteractive = !isEditing || !isDisabled;\n  useUpdateEffect(() => {\n    if (!isEditing) {\n      focus(editButtonRef.current);\n      return;\n    }\n\n    focus(inputRef.current, {\n      selectTextIfInput: selectAllOnFocus\n    });\n    onEditProp == null ? void 0 : onEditProp();\n  }, [isEditing, onEditProp, selectAllOnFocus]);\n  var onEdit = useCallback(() => {\n    if (isInteractive) {\n      setIsEditing(true);\n    }\n  }, [isInteractive]);\n  var onCancel = useCallback(() => {\n    setIsEditing(false);\n    setValue(prevValue);\n    onCancelProp == null ? void 0 : onCancelProp(prevValue);\n  }, [onCancelProp, setValue, prevValue]);\n  var onSubmit = useCallback(() => {\n    setIsEditing(false);\n    setPrevValue(value);\n    onSubmitProp == null ? void 0 : onSubmitProp(value);\n  }, [value, onSubmitProp]);\n  var onChange = useCallback(event => {\n    setValue(event.target.value);\n  }, [setValue]);\n  var onKeyDown = useCallback(event => {\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      Escape: onCancel,\n      Enter: event => {\n        if (!event.shiftKey && !event.metaKey) {\n          onSubmit();\n        }\n      }\n    };\n    var action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [onCancel, onSubmit]);\n  var isValueEmpty = isEmpty(value);\n  var onBlur = useCallback(event => {\n    var relatedTarget = getRelatedTarget(event);\n    var targetIsCancel = contains(cancelButtonRef.current, relatedTarget);\n    var targetIsSubmit = contains(submitButtonRef.current, relatedTarget);\n    var isValidBlur = !targetIsCancel && !targetIsSubmit;\n\n    if (isValidBlur && submitOnBlur) {\n      onSubmit();\n    }\n  }, [submitOnBlur, onSubmit]);\n  var getPreviewProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var tabIndex = isInteractive && isPreviewFocusable ? 0 : undefined;\n    return _extends({}, props, {\n      ref: mergeRefs(ref, previewRef),\n      children: isValueEmpty ? placeholder : value,\n      hidden: isEditing,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      tabIndex,\n      onFocus: callAllHandlers(props.onFocus, onEdit)\n    });\n  }, [isDisabled, isEditing, isInteractive, isPreviewFocusable, isValueEmpty, onEdit, placeholder, value]);\n  var getInputProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      hidden: !isEditing,\n      placeholder,\n      ref: mergeRefs(ref, inputRef),\n      disabled: isDisabled,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      value,\n      onBlur: callAllHandlers(props.onBlur, onBlur),\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n    });\n  }, [isDisabled, isEditing, onBlur, onChange, onKeyDown, placeholder, value]);\n  var getEditButtonProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({\n      \"aria-label\": \"Edit\"\n    }, props, {\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onEdit),\n      ref: mergeRefs(ref, editButtonRef)\n    });\n  }, [onEdit]);\n  var getSubmitButtonProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      \"aria-label\": \"Submit\",\n      ref: mergeRefs(submitButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onSubmit)\n    });\n  }, [onSubmit]);\n  var getCancelButtonProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({\n      \"aria-label\": \"Cancel\",\n      id: \"cancel\"\n    }, props, {\n      ref: mergeRefs(cancelButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onCancel)\n    });\n  }, [onCancel]);\n  return {\n    isEditing,\n    isDisabled,\n    isValueEmpty,\n    value,\n    onEdit,\n    onCancel,\n    onSubmit,\n    getPreviewProps,\n    getInputProps,\n    getEditButtonProps,\n    getSubmitButtonProps,\n    getCancelButtonProps,\n    htmlProps\n  };\n}","map":{"version":3,"sources":["../../src/use-editable.ts"],"names":["props","onChange","onCancel","onSubmit","value","isPreviewFocusable","submitOnBlur","selectAllOnFocus","onEdit","onEditProp","htmlProps","defaultIsEditing","Boolean","startWithEditView","useState","useControllableState","defaultValue","onChangeProp","inputRef","useRef","previewRef","editButtonRef","cancelButtonRef","submitButtonRef","useFocusOnPointerDown","doc","isBrowser","getOwnerDocument","elements","isInteractive","useUpdateEffect","focus","selectTextIfInput","useCallback","setIsEditing","setValue","onCancelProp","setPrevValue","onSubmitProp","event","onKeyDown","eventKey","normalizeEventKey","keyMap","Escape","Enter","action","isValueEmpty","isEmpty","onBlur","relatedTarget","getRelatedTarget","targetIsCancel","contains","targetIsSubmit","isValidBlur","getPreviewProps","ref","tabIndex","mergeRefs","children","hidden","ariaAttr","onFocus","callAllHandlers","getInputProps","disabled","getEditButtonProps","type","onClick","getSubmitButtonProps","getCancelButtonProps","id"],"mappings":"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","sourcesContent":["import {\n  useControllableState,\n  useFocusOnPointerDown,\n  useUpdateEffect,\n} from \"@chakra-ui/hooks\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  contains,\n  focus,\n  getOwnerDocument,\n  isBrowser,\n  isEmpty,\n  normalizeEventKey,\n  getRelatedTarget,\n} from \"@chakra-ui/utils\"\nimport { PropGetter, EventKeyMap, mergeRefs } from \"@chakra-ui/react-utils\"\nimport React, { useCallback, useRef, useState } from \"react\"\n\nexport interface UseEditableProps {\n  /**\n   * The value of the Editable in both edit & preview mode\n   */\n  value?: string\n  /**\n   * The initial value of the Editable in both edit & preview mode\n   */\n  defaultValue?: string\n  /**\n   * If `true`, the Editable will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the Editable will start with edit mode by default.\n   */\n  startWithEditView?: boolean\n  /**\n   * If `true`, the read only view, has a `tabIndex` set to `0`\n   * so it can recieve focus via the keyboard or click.\n   * @default true\n   */\n  isPreviewFocusable?: boolean\n  /**\n   * If `true`, it'll update the value onBlur and turn off the edit mode.\n   * @default true\n   */\n  submitOnBlur?: boolean\n  /**\n   * Callback invoked when user changes input.\n   */\n  onChange?: (nextValue: string) => void\n  /**\n   * Callback invoked when user cancels input with the `Esc` key.\n   * It provides the last confirmed value as argument.\n   */\n  onCancel?: (previousValue: string) => void\n  /**\n   * Callback invoked when user confirms value with `enter` key or by blurring input.\n   */\n  onSubmit?: (nextValue: string) => void\n  /**\n   * Callback invoked once the user enters edit mode.\n   */\n  onEdit?: () => void\n  /**\n   * If `true`, the input's text will be highlighted on focus.\n   * @default true\n   */\n  selectAllOnFocus?: boolean\n  /**\n   * The placeholder text when the value is empty.\n   */\n  placeholder?: string\n}\n\n/**\n * React hook for managing the inline renaming of some text.\n *\n * @see Docs https://chakra-ui.com/docs/editable\n */\nexport function useEditable(props: UseEditableProps = {}) {\n  const {\n    onChange: onChangeProp,\n    onCancel: onCancelProp,\n    onSubmit: onSubmitProp,\n    value: valueProp,\n    isDisabled,\n    defaultValue,\n    startWithEditView,\n    isPreviewFocusable = true,\n    submitOnBlur = true,\n    selectAllOnFocus = true,\n    placeholder,\n    onEdit: onEditProp,\n    ...htmlProps\n  } = props\n\n  const defaultIsEditing = Boolean(startWithEditView && !isDisabled)\n\n  const [isEditing, setIsEditing] = useState(defaultIsEditing)\n\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue || \"\",\n    value: valueProp,\n    onChange: onChangeProp,\n  })\n\n  /**\n   * Keep track of the previous value, so if users\n   * presses `cancel`, we can revert to it.\n   */\n  const [prevValue, setPrevValue] = useState(value)\n\n  /**\n   * Ref to help focus the input in edit mode\n   */\n  const inputRef = useRef<HTMLInputElement>(null)\n  const previewRef = useRef<any>(null)\n\n  const editButtonRef = useRef<HTMLButtonElement>(null)\n  const cancelButtonRef = useRef<HTMLElement>(null)\n  const submitButtonRef = useRef<HTMLElement>(null)\n\n  useFocusOnPointerDown({\n    doc: isBrowser ? getOwnerDocument(inputRef.current) : null,\n    elements: [cancelButtonRef, submitButtonRef],\n  })\n\n  const isInteractive = !isEditing || !isDisabled\n\n  useUpdateEffect(() => {\n    if (!isEditing) {\n      focus(editButtonRef.current)\n      return\n    }\n\n    focus(inputRef.current, {\n      selectTextIfInput: selectAllOnFocus,\n    })\n\n    onEditProp?.()\n  }, [isEditing, onEditProp, selectAllOnFocus])\n\n  const onEdit = useCallback(() => {\n    if (isInteractive) {\n      setIsEditing(true)\n    }\n  }, [isInteractive])\n\n  const onCancel = useCallback(() => {\n    setIsEditing(false)\n    setValue(prevValue)\n    onCancelProp?.(prevValue)\n  }, [onCancelProp, setValue, prevValue])\n\n  const onSubmit = useCallback(() => {\n    setIsEditing(false)\n    setPrevValue(value)\n    onSubmitProp?.(value)\n  }, [value, onSubmitProp])\n\n  const onChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setValue(event.target.value)\n    },\n    [setValue],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        Escape: onCancel,\n        Enter: (event) => {\n          if (!event.shiftKey && !event.metaKey) {\n            onSubmit()\n          }\n        },\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [onCancel, onSubmit],\n  )\n\n  const isValueEmpty = isEmpty(value)\n\n  const onBlur = useCallback(\n    (event: React.FocusEvent) => {\n      const relatedTarget = getRelatedTarget(event)\n      const targetIsCancel = contains(cancelButtonRef.current, relatedTarget)\n      const targetIsSubmit = contains(submitButtonRef.current, relatedTarget)\n      const isValidBlur = !targetIsCancel && !targetIsSubmit\n\n      if (isValidBlur && submitOnBlur) {\n        onSubmit()\n      }\n    },\n    [submitOnBlur, onSubmit],\n  )\n\n  const getPreviewProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const tabIndex = isInteractive && isPreviewFocusable ? 0 : undefined\n      return {\n        ...props,\n        ref: mergeRefs(ref, previewRef),\n        children: isValueEmpty ? placeholder : value,\n        hidden: isEditing,\n        \"aria-disabled\": ariaAttr(isDisabled),\n        tabIndex,\n        onFocus: callAllHandlers(props.onFocus, onEdit),\n      }\n    },\n    [\n      isDisabled,\n      isEditing,\n      isInteractive,\n      isPreviewFocusable,\n      isValueEmpty,\n      onEdit,\n      placeholder,\n      value,\n    ],\n  )\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      hidden: !isEditing,\n      placeholder,\n      ref: mergeRefs(ref, inputRef),\n      disabled: isDisabled,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      value,\n      onBlur: callAllHandlers(props.onBlur, onBlur),\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n    }),\n    [isDisabled, isEditing, onBlur, onChange, onKeyDown, placeholder, value],\n  )\n\n  const getEditButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      \"aria-label\": \"Edit\",\n      ...props,\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onEdit),\n      ref: mergeRefs(ref, editButtonRef),\n    }),\n    [onEdit],\n  )\n\n  const getSubmitButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      \"aria-label\": \"Submit\",\n      ref: mergeRefs(submitButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onSubmit),\n    }),\n    [onSubmit],\n  )\n\n  const getCancelButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      \"aria-label\": \"Cancel\",\n      id: \"cancel\",\n      ...props,\n      ref: mergeRefs(cancelButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onCancel),\n    }),\n    [onCancel],\n  )\n\n  return {\n    isEditing,\n    isDisabled,\n    isValueEmpty,\n    value,\n    onEdit,\n    onCancel,\n    onSubmit,\n    getPreviewProps,\n    getInputProps,\n    getEditButtonProps,\n    getSubmitButtonProps,\n    getCancelButtonProps,\n    htmlProps,\n  }\n}\n\nexport type UseEditableReturn = ReturnType<typeof useEditable>\n"]},"metadata":{},"sourceType":"module"}