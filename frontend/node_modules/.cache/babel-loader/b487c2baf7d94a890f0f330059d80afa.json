{"ast":null,"code":"import { isCssVar, isNumber } from \"@chakra-ui/utils\";\nimport { t } from \"../utils\";\nvar templates = {\n  auto: \"var(--chakra-transform)\",\n  \"auto-gpu\": \"var(--chakra-transform-gpu)\"\n};\n\nvar degreeTransform = value => {\n  if (isCssVar(value) || value == null) return value;\n  return isNumber(value) ? value + \"deg\" : value;\n};\n\nexport var transform = {\n  transform: {\n    property: \"transform\",\n\n    transform(value) {\n      var _templates$value;\n\n      return (_templates$value = templates[value]) != null ? _templates$value : value;\n    }\n\n  },\n  transformOrigin: true,\n  translateX: t.spaceT(\"--chakra-translate-x\"),\n  translateY: t.spaceT(\"--chakra-translate-y\"),\n  rotateX: {\n    property: \"--chakra-rotate-x\",\n    transform: degreeTransform\n  },\n  rotateY: {\n    property: \"--chakra-rotate-y\",\n    transform: degreeTransform\n  },\n  skewX: {\n    property: \"--chakra-skew-x\",\n    transform: degreeTransform\n  },\n  skewY: {\n    property: \"--chakra-skew-y\",\n    transform: degreeTransform\n  }\n};","map":{"version":3,"sources":["../../../src/config/transform.ts"],"names":["templates","auto","degreeTransform","value","isCssVar","isNumber","transform","property","transformOrigin","translateX","t","translateY","rotateX","rotateY","skewX","skewY"],"mappings":"AAAA,SAAA,QAAA,EAAA,QAAA,QAAA,kBAAA;AAGA,SAAA,CAAA,QAAA,UAAA;AAEA,IAAMA,SAAS,GAAG;AAChBC,EAAAA,IAAI,EADY,yBAAA;AAEhB,cAAY;AAFI,CAAlB;;AAKA,IAAMC,eAAe,GAAIC,KAAD,IAAgB;AACtC,MAAIC,QAAQ,CAARA,KAAQ,CAARA,IAAmBD,KAAK,IAA5B,IAAA,EAAsC,OAAA,KAAA;AACtC,SAAOE,QAAQ,CAARA,KAAQ,CAARA,GAAqBF,KAArBE,GAAAA,KAAAA,GAAP,KAAA;AAFF,CAAA;;AAKA,OAAO,IAAMC,SAAiB,GAAG;AAC/BA,EAAAA,SAAS,EAAE;AACTC,IAAAA,QAAQ,EADC,WAAA;;AAETD,IAAAA,SAAS,CAAA,KAAA,EAAQ;AAAA,UAAA,gBAAA;;AACf,aAAA,CAAA,gBAAA,GAAON,SAAS,CAAhB,KAAgB,CAAhB,KAAA,IAAA,GAAA,gBAAA,GAAA,KAAA;AACD;;AAJQ,GADoB;AAO/BQ,EAAAA,eAAe,EAPgB,IAAA;AAQ/BC,EAAAA,UAAU,EAAEC,CAAC,CAADA,MAAAA,CARmB,sBAQnBA,CARmB;AAS/BC,EAAAA,UAAU,EAAED,CAAC,CAADA,MAAAA,CATmB,sBASnBA,CATmB;AAU/BE,EAAAA,OAAO,EAAE;AACPL,IAAAA,QAAQ,EADD,mBAAA;AAEPD,IAAAA,SAAS,EAAEJ;AAFJ,GAVsB;AAc/BW,EAAAA,OAAO,EAAE;AACPN,IAAAA,QAAQ,EADD,mBAAA;AAEPD,IAAAA,SAAS,EAAEJ;AAFJ,GAdsB;AAkB/BY,EAAAA,KAAK,EAAE;AACLP,IAAAA,QAAQ,EADH,iBAAA;AAELD,IAAAA,SAAS,EAAEJ;AAFN,GAlBwB;AAsB/Ba,EAAAA,KAAK,EAAE;AACLR,IAAAA,QAAQ,EADH,iBAAA;AAELD,IAAAA,SAAS,EAAEJ;AAFN;AAtBwB,CAA1B","sourcesContent":["import { isCssVar, isNumber } from \"@chakra-ui/utils\"\nimport * as CSS from \"csstype\"\nimport { Config } from \"../prop-config\"\nimport { t, Token } from \"../utils\"\n\nconst templates = {\n  auto: \"var(--chakra-transform)\",\n  \"auto-gpu\": \"var(--chakra-transform-gpu)\",\n}\n\nconst degreeTransform = (value: any) => {\n  if (isCssVar(value) || value == null) return value\n  return isNumber(value) ? `${value}deg` : value\n}\n\nexport const transform: Config = {\n  transform: {\n    property: \"transform\",\n    transform(value) {\n      return templates[value] ?? value\n    },\n  },\n  transformOrigin: true,\n  translateX: t.spaceT(\"--chakra-translate-x\"),\n  translateY: t.spaceT(\"--chakra-translate-y\"),\n  rotateX: {\n    property: \"--chakra-rotate-x\",\n    transform: degreeTransform,\n  },\n  rotateY: {\n    property: \"--chakra-rotate-y\",\n    transform: degreeTransform,\n  },\n  skewX: {\n    property: \"--chakra-skew-x\",\n    transform: degreeTransform,\n  },\n  skewY: {\n    property: \"--chakra-skew-y\",\n    transform: degreeTransform,\n  },\n}\n\nexport interface TransformProps {\n  /**\n   * The CSS `transform` property\n   */\n  transform?: Token<CSS.Property.Transform | keyof typeof templates>\n  /**\n   * The CSS `transform-origin` property\n   */\n  transformOrigin?: Token<CSS.Property.TransformOrigin | number, \"sizes\">\n}\n"]},"metadata":{},"sourceType":"module"}