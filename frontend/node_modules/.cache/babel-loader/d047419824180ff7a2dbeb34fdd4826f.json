{"ast":null,"code":"import { flushSync } from 'framesync';\nimport { compareByDepth } from '../../../render/utils/compare-by-depth.js';\nimport { Presence } from '../types.js';\n/**\n * Default handlers for batching VisualElements\n */\n\nvar defaultHandler = {\n  measureLayout: function (child) {\n    return child.updateLayoutMeasurement();\n  },\n  layoutReady: function (child) {\n    return child.notifyLayoutReady();\n  }\n};\n/**\n * Create a batcher to process VisualElements\n */\n\nfunction createBatcher() {\n  var queue = new Set();\n  return {\n    add: function (child) {\n      return queue.add(child);\n    },\n    flush: function (_a) {\n      var _b = _a === void 0 ? defaultHandler : _a,\n          measureLayout = _b.measureLayout,\n          layoutReady = _b.layoutReady,\n          parent = _b.parent;\n\n      var order = Array.from(queue).sort(compareByDepth);\n\n      var resetAndMeasure = function () {\n        /**\n         * Write: Reset any transforms on children elements so we can read their actual layout\n         */\n        order.forEach(function (child) {\n          return child.resetTransform();\n        });\n        /**\n         * Read: Measure the actual layout\n         */\n\n        order.forEach(measureLayout);\n      };\n\n      parent ? parent.withoutTransform(resetAndMeasure) : resetAndMeasure();\n      /**\n       * Write: Notify the VisualElements they're ready for further write operations.\n       */\n\n      order.forEach(layoutReady);\n      /**\n       * After all children have started animating, ensure any Entering components are set to Present.\n       * If we add deferred animations (set up all animations and then start them in two loops) this\n       * could be moved to the start loop. But it needs to happen after all the animations configs\n       * are generated in AnimateSharedLayout as this relies on presence data\n       */\n\n      order.forEach(function (child) {\n        if (child.isPresent) child.presence = Presence.Present;\n      });\n      /**\n       * Starting these animations will have queued jobs on the frame loop. In some situations,\n       * like when removing an element, these will be processed too late after the DOM is manipulated,\n       * leaving a flash of incorrectly-projected content. By manually flushing these jobs\n       * we ensure there's no flash.\n       */\n\n      flushSync.preRender();\n      flushSync.render();\n      queue.clear();\n    }\n  };\n}\n\nexport { createBatcher };","map":{"version":3,"sources":["/Users/samuelmunro/development/vibey/frontend/node_modules/framer-motion/dist/es/components/AnimateSharedLayout/utils/batcher.js"],"names":["flushSync","compareByDepth","Presence","defaultHandler","measureLayout","child","updateLayoutMeasurement","layoutReady","notifyLayoutReady","createBatcher","queue","Set","add","flush","_a","_b","parent","order","Array","from","sort","resetAndMeasure","forEach","resetTransform","withoutTransform","isPresent","presence","Present","preRender","render","clear"],"mappings":"AAAA,SAASA,SAAT,QAA0B,WAA1B;AACA,SAASC,cAAT,QAA+B,2CAA/B;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA;AACA;AACA;;AACA,IAAIC,cAAc,GAAG;AACjBC,EAAAA,aAAa,EAAE,UAAUC,KAAV,EAAiB;AAAE,WAAOA,KAAK,CAACC,uBAAN,EAAP;AAAyC,GAD1D;AAEjBC,EAAAA,WAAW,EAAE,UAAUF,KAAV,EAAiB;AAAE,WAAOA,KAAK,CAACG,iBAAN,EAAP;AAAmC;AAFlD,CAArB;AAIA;AACA;AACA;;AACA,SAASC,aAAT,GAAyB;AACrB,MAAIC,KAAK,GAAG,IAAIC,GAAJ,EAAZ;AACA,SAAO;AACHC,IAAAA,GAAG,EAAE,UAAUP,KAAV,EAAiB;AAAE,aAAOK,KAAK,CAACE,GAAN,CAAUP,KAAV,CAAP;AAA0B,KAD/C;AAEHQ,IAAAA,KAAK,EAAE,UAAUC,EAAV,EAAc;AACjB,UAAIC,EAAE,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgBX,cAAhB,GAAiCW,EAA1C;AAAA,UAA8CV,aAAa,GAAGW,EAAE,CAACX,aAAjE;AAAA,UAAgFG,WAAW,GAAGQ,EAAE,CAACR,WAAjG;AAAA,UAA8GS,MAAM,GAAGD,EAAE,CAACC,MAA1H;;AACA,UAAIC,KAAK,GAAGC,KAAK,CAACC,IAAN,CAAWT,KAAX,EAAkBU,IAAlB,CAAuBnB,cAAvB,CAAZ;;AACA,UAAIoB,eAAe,GAAG,YAAY;AAC9B;AAChB;AACA;AACgBJ,QAAAA,KAAK,CAACK,OAAN,CAAc,UAAUjB,KAAV,EAAiB;AAAE,iBAAOA,KAAK,CAACkB,cAAN,EAAP;AAAgC,SAAjE;AACA;AAChB;AACA;;AACgBN,QAAAA,KAAK,CAACK,OAAN,CAAclB,aAAd;AACH,OATD;;AAUAY,MAAAA,MAAM,GACAA,MAAM,CAACQ,gBAAP,CAAwBH,eAAxB,CADA,GAEAA,eAAe,EAFrB;AAGA;AACZ;AACA;;AACYJ,MAAAA,KAAK,CAACK,OAAN,CAAcf,WAAd;AACA;AACZ;AACA;AACA;AACA;AACA;;AACYU,MAAAA,KAAK,CAACK,OAAN,CAAc,UAAUjB,KAAV,EAAiB;AAC3B,YAAIA,KAAK,CAACoB,SAAV,EACIpB,KAAK,CAACqB,QAAN,GAAiBxB,QAAQ,CAACyB,OAA1B;AACP,OAHD;AAIA;AACZ;AACA;AACA;AACA;AACA;;AACY3B,MAAAA,SAAS,CAAC4B,SAAV;AACA5B,MAAAA,SAAS,CAAC6B,MAAV;AACAnB,MAAAA,KAAK,CAACoB,KAAN;AACH;AAzCE,GAAP;AA2CH;;AAED,SAASrB,aAAT","sourcesContent":["import { flushSync } from 'framesync';\nimport { compareByDepth } from '../../../render/utils/compare-by-depth.js';\nimport { Presence } from '../types.js';\n\n/**\n * Default handlers for batching VisualElements\n */\nvar defaultHandler = {\n    measureLayout: function (child) { return child.updateLayoutMeasurement(); },\n    layoutReady: function (child) { return child.notifyLayoutReady(); },\n};\n/**\n * Create a batcher to process VisualElements\n */\nfunction createBatcher() {\n    var queue = new Set();\n    return {\n        add: function (child) { return queue.add(child); },\n        flush: function (_a) {\n            var _b = _a === void 0 ? defaultHandler : _a, measureLayout = _b.measureLayout, layoutReady = _b.layoutReady, parent = _b.parent;\n            var order = Array.from(queue).sort(compareByDepth);\n            var resetAndMeasure = function () {\n                /**\n                 * Write: Reset any transforms on children elements so we can read their actual layout\n                 */\n                order.forEach(function (child) { return child.resetTransform(); });\n                /**\n                 * Read: Measure the actual layout\n                 */\n                order.forEach(measureLayout);\n            };\n            parent\n                ? parent.withoutTransform(resetAndMeasure)\n                : resetAndMeasure();\n            /**\n             * Write: Notify the VisualElements they're ready for further write operations.\n             */\n            order.forEach(layoutReady);\n            /**\n             * After all children have started animating, ensure any Entering components are set to Present.\n             * If we add deferred animations (set up all animations and then start them in two loops) this\n             * could be moved to the start loop. But it needs to happen after all the animations configs\n             * are generated in AnimateSharedLayout as this relies on presence data\n             */\n            order.forEach(function (child) {\n                if (child.isPresent)\n                    child.presence = Presence.Present;\n            });\n            /**\n             * Starting these animations will have queued jobs on the frame loop. In some situations,\n             * like when removing an element, these will be processed too late after the DOM is manipulated,\n             * leaving a flash of incorrectly-projected content. By manually flushing these jobs\n             * we ensure there's no flash.\n             */\n            flushSync.preRender();\n            flushSync.render();\n            queue.clear();\n        },\n    };\n}\n\nexport { createBatcher };\n"]},"metadata":{},"sourceType":"module"}