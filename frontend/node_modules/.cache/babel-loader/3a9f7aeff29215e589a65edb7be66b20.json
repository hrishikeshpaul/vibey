{"ast":null,"code":"import { SET_USER } from 'app/store/user/userActionTypes';\nimport { GET_API_START, GET_API_FAILURE, GET_API_SUCCESS, SET_USER_LOGIN } from \"app/store/system/systemActionTypes\";\nimport { login, authorize, logout } from \"app/services/auth.service\";\n/*\n * Called from Home.tsx\n * login callback returns res.data (query string)\n * query string for forwarding to spotify login\n * spotify returns us to Redirect component\n */\n\nexport const getLoginRedirect = () => async dispatch => {\n  dispatch({\n    type: GET_API_START\n  });\n\n  try {\n    const res = await login();\n    window.open(res.data, '_self');\n    dispatch({\n      type: GET_API_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_API_FAILURE,\n      payload: err\n    });\n  }\n};\n/*\n * getAuthorization uses authorize() service\n * authorizes state backend\n * if success, returns user, user is set to state\n * API_LOADING and API_FAILURE dispatches should likely be created\n * Wondering where to store API_LOADING and API_FAILURE, apiReducer?\n * string | undefined feels messy\n *\n */\n\nexport const getAuthorization = (code, state, history) => async dispatch => {\n  dispatch({\n    type: GET_API_START\n  });\n\n  try {\n    const res = await authorize(code, state);\n    const {\n      accessToken,\n      refreshToken\n    } = res.data;\n    localStorage.setItem('v-at', accessToken ? accessToken : '');\n    localStorage.setItem('v-rt', refreshToken ? refreshToken : '');\n    localStorage.setItem('v-user', JSON.stringify(res.data.user));\n    dispatch({\n      type: SET_USER,\n      payload: res.data.user\n    });\n    dispatch({\n      type: GET_API_SUCCESS\n    });\n    history.push('/home');\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: GET_API_FAILURE,\n      payload: err.data\n    });\n  }\n};\n/**\n * Logs the user out\n * makes an API call to clear the JWT from the backend\n * \n * @param history router history\n */\n\nexport const onLogout = history => async dispatch => {\n  try {\n    dispatch({\n      type: GET_API_START\n    });\n    await logout();\n    localStorage.removeItem('v-token');\n    localStorage.removeItem('v-user');\n    dispatch({\n      type: SET_USER,\n      payload: {\n        id: \"\",\n        username: \"\",\n        href: \"\",\n        uri: \"\",\n        email: \"\",\n        display_name: \"\",\n        image: \"\",\n        likes: []\n      }\n    });\n    dispatch({\n      type: SET_USER_LOGIN,\n      payload: false\n    });\n    dispatch({\n      type: GET_API_SUCCESS\n    });\n    history.push('/');\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: GET_API_FAILURE,\n      payload: err.data\n    });\n  }\n};","map":{"version":3,"sources":["/Users/samuelmunro/development/vibey/frontend/src/app/store/user/userActions.ts"],"names":["SET_USER","GET_API_START","GET_API_FAILURE","GET_API_SUCCESS","SET_USER_LOGIN","login","authorize","logout","getLoginRedirect","dispatch","type","res","window","open","data","err","payload","getAuthorization","code","state","history","accessToken","refreshToken","localStorage","setItem","JSON","stringify","user","push","console","log","onLogout","removeItem","id","username","href","uri","email","display_name","image","likes"],"mappings":"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","sourcesContent":["import { Dispatch } from 'redux';\nimport { SET_USER, UserActionTypes } from 'app/store/user/userActionTypes';\nimport {\n  GET_API_START,\n  GET_API_FAILURE,\n  GET_API_SUCCESS,\n  SET_USER_LOGIN,\n} from \"app/store/system/systemActionTypes\";\nimport { login, authorize, logout } from \"app/services/auth.service\";\n\n/*\n * Called from Home.tsx\n * login callback returns res.data (query string)\n * query string for forwarding to spotify login\n * spotify returns us to Redirect component\n */\nexport const getLoginRedirect =\n () => async (dispatch: Dispatch<UserActionTypes>) => {\n  dispatch({ type: GET_API_START });\n  try {\n   const res = await login();\n   window.open(res.data, '_self');\n   dispatch({ type: GET_API_SUCCESS });\n  } catch (err) {\n   dispatch({\n    type: GET_API_FAILURE,\n    payload: err,\n   });\n  }\n };\n\n/*\n * getAuthorization uses authorize() service\n * authorizes state backend\n * if success, returns user, user is set to state\n * API_LOADING and API_FAILURE dispatches should likely be created\n * Wondering where to store API_LOADING and API_FAILURE, apiReducer?\n * string | undefined feels messy\n *\n */\nexport const getAuthorization =\n (code: string | undefined, state: string | undefined, history: any) =>\n async (dispatch: Dispatch<UserActionTypes>) => {\n  dispatch({ type: GET_API_START });\n\n  try {\n   const res = await authorize(code, state);\n   const { accessToken, refreshToken } = res.data;\n\n   localStorage.setItem('v-at', accessToken ? accessToken : '');\n   localStorage.setItem('v-rt', refreshToken ? refreshToken : '');\n   localStorage.setItem('v-user', JSON.stringify(res.data.user));\n\n   dispatch({\n    type: SET_USER,\n    payload: res.data.user,\n   });\n   dispatch({\n    type: GET_API_SUCCESS,\n   });\n   history.push('/home');\n  } catch (err) {\n   console.log(err);\n   dispatch({\n    type: GET_API_FAILURE,\n    payload: err.data,\n   });\n  }\n };\n\n/**\n * Logs the user out\n * makes an API call to clear the JWT from the backend\n * \n * @param history router history\n */\nexport const onLogout = (history: any) => async (dispatch: Dispatch<UserActionTypes>) => {\n   \n  try {\n    dispatch({type: GET_API_START})\n    await logout();\n    localStorage.removeItem('v-token');\n    localStorage.removeItem('v-user');\n    dispatch({\n      type: SET_USER,\n      payload: {\n        id: \"\",\n        username: \"\",\n        href: \"\",\n        uri: \"\",\n        email: \"\",\n        display_name: \"\",\n        image: \"\",\n        likes: [],\n      }\n    });\n    dispatch({\n      type: SET_USER_LOGIN,\n      payload: false\n    })\n    dispatch({\n      type: GET_API_SUCCESS,\n    });\n    history.push('/');\n  } catch(err) {\n    console.log(err)\n    dispatch({\n      type: GET_API_FAILURE,\n      payload: err.data,\n    });\n  } \n}\n"]},"metadata":{},"sourceType":"module"}