{"ast":null,"code":"var _jsxFileName = \"/Users/samuelmunro/development/vibey/frontend/src/app/components/Select/index.tsx\",\n    _s = $RefreshSig$();\n\n/* Copyright (C) 2021 Vibey - All Rights Reserved */\nimport React, { useEffect, useState, useRef } from \"react\";\nimport CreatableSelect from 'react-select/creatable';\nimport { SelectOption, NoSelectOption } from './SelectOption';\nimport { searchTags } from '../../services/tag.service';\n/**\n * @function updateTags function emitted that contains the updated tags\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Select = props => {\n  _s();\n\n  const {\n    updateTags,\n    presentTags,\n    handleError\n  } = props;\n  const [tags, setTags] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const selectInputRef = useRef();\n  /**\n   * Get the most popular tags when the component loads\n   */\n\n  useEffect(() => {\n    getTagsFromSubstring();\n  }, []);\n  /**\n   * When a tag is selected or created this function is called\n   * To avoid duplicating previous tags, this sends back the\n   * newly added tag to the parent component. \n   * \n   * @param tags list of tags from the select\n   */\n\n  const handleSelectionChange = tags => {\n    if (tags.length) {\n      updateTags(tags[tags.length - 1]);\n      setInputValue('');\n      setTags([]);\n      getTagsFromSubstring();\n    }\n  };\n  /**\n   * When the user types letters, the search should be updated.\n   * This mocks a basic debounce of 250ms \n   * \n   * @param input typed string values\n   */\n\n\n  const handleInputchange = inputValue => {\n    setInputValue(inputValue);\n\n    if (inputValue) {\n      getTagsFromSubstring(inputValue);\n      setTimeout(() => {}, 500);\n    }\n  };\n  /**\n   * Function to get the tags based on the typed letters\n   * and update the options\n   * \n   * @param substr input value \n   */\n\n\n  const getTagsFromSubstring = async (substr = '') => {\n    try {\n      const response = await searchTags(substr);\n      setTags(response.data);\n    } catch (err) {\n      console.log(err);\n      handleError(err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(CreatableSelect, {\n      ref: selectInputRef,\n      isMulti: true,\n      inputValue: inputValue,\n      classNamePrefix: \"select\",\n      defaultValue: presentTags,\n      onChange: handleSelectionChange,\n      options: tags,\n      components: {\n        Option: SelectOption,\n        NoOptionsMessage: NoSelectOption\n      },\n      onInputChange: handleInputchange,\n      placeholder: \"Type to add tags...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Select, \"x2GLHPPkzWZSbPMUYC/0zprLmQs=\");\n\n_c = Select;\nexport default Select;\n\nvar _c;\n\n$RefreshReg$(_c, \"Select\");","map":{"version":3,"sources":["/Users/samuelmunro/development/vibey/frontend/src/app/components/Select/index.tsx"],"names":["React","useEffect","useState","useRef","CreatableSelect","SelectOption","NoSelectOption","searchTags","Select","props","updateTags","presentTags","handleError","tags","setTags","inputValue","setInputValue","selectInputRef","getTagsFromSubstring","handleSelectionChange","length","handleInputchange","setTimeout","substr","response","data","err","console","log","Option","NoOptionsMessage"],"mappings":";;;AAAA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;AAEA,OAAOC,eAAP,MAA4B,wBAA5B;AAEA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,gBAA7C;AACA,SAASC,UAAT,QAA2B,4BAA3B;AAEA;AACA;AACA;;;;AAOA,MAAMC,MAAM,GAAIC,KAAD,IAAkB;AAAA;;AAC/B,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,WAAd;AAA2BC,IAAAA;AAA3B,MAA2CH,KAAjD;AACA,QAAM,CAAEI,IAAF,EAAQC,OAAR,IAAoBZ,QAAQ,CAAQ,EAAR,CAAlC;AACA,QAAM,CAAEa,UAAF,EAAcC,aAAd,IAAgCd,QAAQ,CAAS,EAAT,CAA9C;AACA,QAAMe,cAAc,GAAGd,MAAM,EAA7B;AAEA;AACF;AACA;;AACEF,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,oBAAoB;AACrB,GAFQ,EAEN,EAFM,CAAT;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,QAAMC,qBAAqB,GAAIN,IAAD,IAA4B;AACxD,QAAIA,IAAI,CAACO,MAAT,EAAiB;AACfV,MAAAA,UAAU,CAACG,IAAI,CAACA,IAAI,CAACO,MAAL,GAAc,CAAf,CAAL,CAAV;AACAJ,MAAAA,aAAa,CAAC,EAAD,CAAb;AACAF,MAAAA,OAAO,CAAC,EAAD,CAAP;AACAI,MAAAA,oBAAoB;AACrB;AACF,GAPD;AASA;AACF;AACA;AACA;AACA;AACA;;;AACE,QAAMG,iBAAiB,GAAIN,UAAD,IAAwB;AAChDC,IAAAA,aAAa,CAACD,UAAD,CAAb;;AACA,QAAGA,UAAH,EAAe;AACbG,MAAAA,oBAAoB,CAACH,UAAD,CAApB;AACAO,MAAAA,UAAU,CAAC,MAAK,CACf,CADS,EACP,GADO,CAAV;AAED;AACF,GAPD;AASA;AACF;AACA;AACA;AACA;AACA;;;AACE,QAAMJ,oBAAoB,GAAG,OAAOK,MAAM,GAAG,EAAhB,KAAuB;AAClD,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMjB,UAAU,CAACgB,MAAD,CAAjC;AACAT,MAAAA,OAAO,CAACU,QAAQ,CAACC,IAAV,CAAP;AACD,KAHD,CAGE,OAAMC,GAAN,EAAW;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAd,MAAAA,WAAW,CAACc,GAAD,CAAX;AACD;AACF,GARD;;AAUA,sBACE;AAAA,2BACE,QAAC,eAAD;AACE,MAAA,GAAG,EAAET,cADP;AAEE,MAAA,OAAO,MAFT;AAGE,MAAA,UAAU,EAAEF,UAHd;AAIE,MAAA,eAAe,EAAC,QAJlB;AAKE,MAAA,YAAY,EAAEJ,WALhB;AAME,MAAA,QAAQ,EAAEQ,qBANZ;AAOE,MAAA,OAAO,EAAEN,IAPX;AAQE,MAAA,UAAU,EAAE;AAAEgB,QAAAA,MAAM,EAAExB,YAAV;AAAwByB,QAAAA,gBAAgB,EAAExB;AAA1C,OARd;AASE,MAAA,aAAa,EAAEe,iBATjB;AAUE,MAAA,WAAW,EAAC;AAVd;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CA5ED;;GAAMb,M;;KAAAA,M;AA8EN,eAAeA,MAAf","sourcesContent":["/* Copyright (C) 2021 Vibey - All Rights Reserved */\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { Tag } from \"../../models/tag.model\";\nimport CreatableSelect from 'react-select/creatable';\nimport { OptionsType,  } from \"react-select\";\nimport { SelectOption, NoSelectOption } from './SelectOption';\nimport { searchTags } from '../../services/tag.service';\n\n/**\n * @function updateTags function emitted that contains the updated tags\n */\ntype State = {\n  updateTags: (tag: Tag) => void;\n  presentTags: Tag[];\n  handleError: (error: any) => void;\n};\n\nconst Select = (props: State) => {\n  const { updateTags, presentTags, handleError } = props;\n  const [ tags, setTags ] = useState<Tag[]>([]);\n  const [ inputValue, setInputValue ] = useState<string>('');\n  const selectInputRef = useRef<any>();\n\n  /**\n   * Get the most popular tags when the component loads\n   */\n  useEffect(() => {\n    getTagsFromSubstring();\n  }, [])\n\n  /**\n   * When a tag is selected or created this function is called\n   * To avoid duplicating previous tags, this sends back the\n   * newly added tag to the parent component. \n   * \n   * @param tags list of tags from the select\n   */\n  const handleSelectionChange = (tags: OptionsType<Tag>) => {\n    if (tags.length) {\n      updateTags(tags[tags.length - 1]);\n      setInputValue('');\n      setTags([]);\n      getTagsFromSubstring();\n    }\n  };\n\n  /**\n   * When the user types letters, the search should be updated.\n   * This mocks a basic debounce of 250ms \n   * \n   * @param input typed string values\n   */\n  const handleInputchange = (inputValue: string) => {\n    setInputValue(inputValue);\n    if(inputValue) {\n      getTagsFromSubstring(inputValue);\n      setTimeout(()=> {\n      }, 500)\n    }\n  }\n\n  /**\n   * Function to get the tags based on the typed letters\n   * and update the options\n   * \n   * @param substr input value \n   */\n  const getTagsFromSubstring = async (substr = '') => {\n    try {\n      const response = await searchTags(substr);\n      setTags(response.data);\n    } catch(err) {\n      console.log(err);\n      handleError(err);\n    }\n  }\n\n  return (\n    <div>\n      <CreatableSelect\n        ref={selectInputRef}\n        isMulti\n        inputValue={inputValue}\n        classNamePrefix=\"select\"\n        defaultValue={presentTags}\n        onChange={handleSelectionChange}\n        options={tags}\n        components={{ Option: SelectOption, NoOptionsMessage: NoSelectOption }}\n        onInputChange={handleInputchange}\n        placeholder=\"Type to add tags...\"\n      />\n    </div>\n  );\n};\n\nexport default Select;\n"]},"metadata":{},"sourceType":"module"}