{"ast":null,"code":"import { isNumber, isObject } from \"@chakra-ui/utils\";\n\nvar analyzeCSSValue = value => {\n  var num = parseFloat(value.toString());\n  var unit = value.toString().replace(String(num), \"\");\n  return {\n    unitless: !unit,\n    value: num,\n    unit\n  };\n};\n\nexport var px = value => {\n  if (value == null) return value;\n  var {\n    unitless\n  } = analyzeCSSValue(value);\n  return unitless || isNumber(value) ? value + \"px\" : value;\n};\nexport var tokenToCSSVar = (scale, value) => theme => {\n  var valueStr = String(value);\n  var key = scale ? scale + \".\" + valueStr : valueStr;\n  return isObject(theme.__cssMap) && key in theme.__cssMap ? theme.__cssMap[key].varRef : value;\n};\nexport function createTransform(options) {\n  var {\n    scale,\n    transform,\n    compose\n  } = options;\n\n  var fn = (value, theme) => {\n    var _transform;\n\n    var _value = tokenToCSSVar(scale, value)(theme);\n\n    var result = (_transform = transform == null ? void 0 : transform(_value, theme)) != null ? _transform : _value;\n\n    if (compose) {\n      result = compose(result, theme);\n    }\n\n    return result;\n  };\n\n  return fn;\n}","map":{"version":3,"sources":["../../src/create-transform.ts"],"names":["analyzeCSSValue","value","num","parseFloat","unit","String","unitless","px","isNumber","tokenToCSSVar","theme","valueStr","key","scale","isObject","compose","fn","_value","result","transform"],"mappings":"AAAA,SAAA,QAAA,EAAA,QAAA,QAAA,kBAAA;;AAIA,IAAMA,eAAe,GAAIC,KAAD,IAA4B;AAClD,MAAMC,GAAG,GAAGC,UAAU,CAACF,KAAK,CAA5B,QAAuBA,EAAD,CAAtB;AACA,MAAMG,IAAI,GAAGH,KAAK,CAALA,QAAAA,GAAAA,OAAAA,CAAyBI,MAAM,CAA/BJ,GAA+B,CAA/BA,EAAb,EAAaA,CAAb;AACA,SAAO;AAAEK,IAAAA,QAAQ,EAAE,CAAZ,IAAA;AAAmBL,IAAAA,KAAK,EAAxB,GAAA;AAA+BG,IAAAA;AAA/B,GAAP;AAHF,CAAA;;AAMA,OAAO,IAAMG,EAAE,GAAIN,KAAD,IAAoC;AACpD,MAAIA,KAAK,IAAT,IAAA,EAAmB,OAAA,KAAA;AACnB,MAAM;AAAEK,IAAAA;AAAF,MAAeN,eAAe,CAApC,KAAoC,CAApC;AACA,SAAOM,QAAQ,IAAIE,QAAQ,CAApBF,KAAoB,CAApBA,GAAiCL,KAAjCK,GAAAA,IAAAA,GAAP,KAAA;AAHK,CAAA;AAYP,OAAO,IAAMG,aAAa,GAAG,CAAA,KAAA,EAAA,KAAA,KAC3BC,KAD8D,IAE3D;AACH,MAAMC,QAAQ,GAAGN,MAAM,CAAvB,KAAuB,CAAvB;AACA,MAAMO,GAAG,GAAGC,KAAK,GAAMA,KAAN,GAAA,GAAMA,GAAN,QAAA,GAAjB,QAAA;AACA,SAAOC,QAAQ,CAACJ,KAAK,CAAdI,QAAQ,CAARA,IAA4BF,GAAG,IAAIF,KAAK,CAAxCI,QAAAA,GACHJ,KAAK,CAALA,QAAAA,CAAAA,GAAAA,EADGI,MAAAA,GAAP,KAAA;AALK,CAAA;AAUP,OAAO,SAAA,eAAA,CAAA,OAAA,EAA0D;AAC/D,MAAM;AAAA,IAAA,KAAA;AAAA,IAAA,SAAA;AAAoBC,IAAAA;AAApB,MAAN,OAAA;;AAEA,MAAMC,EAAa,GAAG,CAAA,KAAA,EAAA,KAAA,KAAkB;AAAA,QAAA,UAAA;;AACtC,QAAMC,MAAM,GAAGR,aAAa,CAAA,KAAA,EAAbA,KAAa,CAAbA,CAAf,KAAeA,CAAf;;AACA,QAAIS,MAAM,GAAA,CAAA,UAAA,GAAGC,SAAH,IAAA,IAAGA,GAAH,KAAA,CAAGA,GAAAA,SAAS,CAAA,MAAA,EAAZ,KAAY,CAAZ,KAAA,IAAA,GAAA,UAAA,GAAV,MAAA;;AACA,QAAA,OAAA,EAAa;AACXD,MAAAA,MAAM,GAAGH,OAAO,CAAA,MAAA,EAAhBG,KAAgB,CAAhBA;AACD;;AACD,WAAA,MAAA;AANF,GAAA;;AASA,SAAA,EAAA;AACD","sourcesContent":["import { Dict, isNumber, isObject } from \"@chakra-ui/utils\"\nimport type { ThemeScale } from \"./css-var\"\nimport type { Transform } from \"./types\"\n\nconst analyzeCSSValue = (value: number | string) => {\n  const num = parseFloat(value.toString())\n  const unit = value.toString().replace(String(num), \"\")\n  return { unitless: !unit, value: num, unit }\n}\n\nexport const px = (value: number | string): string => {\n  if (value == null) return value\n  const { unitless } = analyzeCSSValue(value)\n  return unitless || isNumber(value) ? `${value}px` : value\n}\n\ninterface CreateTransformOptions {\n  scale: ThemeScale\n  compose?: Transform\n  transform?: Transform\n}\n\nexport const tokenToCSSVar = (scale: ThemeScale, value: any) => (\n  theme: Dict,\n) => {\n  const valueStr = String(value)\n  const key = scale ? `${scale}.${valueStr}` : valueStr\n  return isObject(theme.__cssMap) && key in theme.__cssMap\n    ? theme.__cssMap[key].varRef\n    : value\n}\n\nexport function createTransform(options: CreateTransformOptions) {\n  const { scale, transform, compose } = options\n\n  const fn: Transform = (value, theme) => {\n    const _value = tokenToCSSVar(scale, value)(theme)\n    let result = transform?.(_value, theme) ?? _value\n    if (compose) {\n      result = compose(result, theme)\n    }\n    return result\n  }\n\n  return fn\n}\n"]},"metadata":{},"sourceType":"module"}